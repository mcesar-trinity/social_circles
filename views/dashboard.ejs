<%- include('./partials/header') %> 

    <!-- Choices.js CSS and JS used for enhanced select dropdowns -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

    <body class="home"> 
        <div class="dashboard-container">

            <!-- ==============================================
                User dashboard: profile section
            =============================================== -->
            <h1>Dashboard</h1>
            <section class="profile-section">
                <h2>Your Profile</h2>
                <h2 style="color: black;">Your High Score: <%= happinessScore %></h2>

                <!-- Read-only provile view -->
                <div id="profile-view">
                    <p><strong>Name: </strong><%= user.name %></p>
                    <p><strong>Email: </strong><%= user.email %></p>
                    <button id="edit-profile-btn" class="btn btn-secondary">Edit Profile</button>
                </div>

                <!-- Profile Color Customization -->
                <div class="profile-color-settings">
                    <label for="colorSlider">Choose Profile Color:</label><br>
                    <input type="range" id="colorSlider" min="0" max="360" value="180" data-initialized="false"><br><br>
                
                    <button id="saveColorButton" type="button">Save Color</button>
                    <button id="resetColorButton" type="button">Reset to Default</button>
                    
                    <!-- Color saved popup-->
                    <div id="saveMessage" style="display: none; color: green; margin-top: 10px; font-weight: bold;">
                        Color Saved!
                    </div>
                </div>
                            

                <!-- Profile editing form, hidden initially -->
                <form id="edit-profile-form" action="/dashboard/edit" method="POST" style="display: none;">
                    <div class="form-group">
                        <label for="username">Name:</label>
                        <input type="text" name="name" placeholder="<%= user.username %>" required><br>

                        <label for="email">Email:</label>
                        <input type="email" name="email" placeholder="<%= user.email %>" required><br>

                        <hr>
                        <h4>Change Password</h4>
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" name="currentPassword" placeholder="Enter current password"><br>

                        <label for="newPassword">New Password:</label>
                        <input type="password" name="newPassword" placeholder="Enter new password"><br>
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">Update Profile</button>
                            <button type="button" id="cancel-edit-btn" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                </form>

                <!-- Account deletion and logout section -->
                <div class="form-actions">
                    <!-- Trigger button -->
                     <button type="button" class="btn btn-danger" id="deleteAccountBtn" style="margin-right: 10px">
                        Delete Profile
                     </button>

                     <!-- Logout button-->
                    <form action="/dashboard/logout" method="POST">
                        <button type="submit" class="btn btn-secondary">Logout</button>
                    </form>
                </div>

                <!-- Deletion Confirmation Modal -->
                <div id="deleteModal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0,0,0,0.5); justify-content: center; align-items: center; z-index: 999;">
                    <div style="background: white; padding: 20px; border-radius: 10px; text-align: center;">
                        <p>Are you sure you want to delete your account? This action cannot be undone.</p>
                        <form action="/dashboard/delete" method="POST"> <!--style="margin-right: 10px"-->
                            <button type="submit" class="btn btn-danger">Yes, I'm sure.</button>
                            <button type="button" class="btn btn-secondary" id="cancelDeleteBtn" style="margin-left: 10px;">Cancel</button>
                        </form>
                    </div>
                </div>
            </section>


            <!-- ==============================================
                Admin Section (Visibly only to admins!)
            =============================================== -->
            <% if (isAdmin) { %>
                <section class="admin-section">

                    <!-- Admin: Manage tasks -->
                    <h2>Admin Section: Manage Tasks</h2>

                    <!-- Form to add a task -->
                    <form action="/dashboard/admin/add-task" method="POST">
                        <div class="form-group">
                            <label for="taskName">Task Name:</label>
                            <input type="text" name="taskName" required><br>

                            <label for="taskCategory">Category:</label>
                            <select name="category_id" required>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category.id %>"><%= category.name %></option>
                                <% }); %>
                            </select><br>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">Add Task</button>
                        </div>
                    </form>

                    <!-- List of tasks with delete option -->
                    <h3>Existing Tasks</h3>
                    <div class="admin-tasks-box">
                        <% tasks.forEach(task => { %>
                            <div class="admin-task-item">
                                <p><strong><%= task.name %></strong>: <%= task.description %></p>
                                <p>Category: <%= task.category_name %></p>
                                <div class="item-card-actions">
                                    <form action="/dashboard/admin/delete-task" method="POST">
                                        <input type="hidden" name="taskId" value="<%= task.id %>">
                                        <button type="submit" class="btn btn-danger">Delete Task</button>
                                    </form>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <!-- Admin: Manage Game Characters -->
                    <h2>Admin Section: Manage Game Characters</h2>
                        <!-- Form to add a game character -->
                        <form action="/dashboard/admin/add-character" method="POST">
                            <div class="form-group">
                                <label for="name">Character Name:</label>
                                <input type="text" name="name" required><br>

                                <!-- Multiple selects: loves, likes, dislikes, hates -->
                                <label for="characterLoves">Loves:</label>
                                <select name="loves[]" id="characterLoves" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="characterLikes">Likes:</label>
                                <select name="likes[]" id="characterLikes" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="characterDislikes">Dislikes:</label>
                                <select name="dislikes[]" id="characterDislikes" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="characterHates">Hates:</label>
                                <select name="hates[]" id="characterHates" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="activityDurability">Activity Durability:</label>
                                <input type="number" name="activity_durability" min="0" step="1"><br>

                                <label for="description">Character description:</label>
                                <input type="text" name="description" required><br>

                                <label for="npmPicture">Character Picture (URL or npm image path):</label>
                                <input type="text" name="npm_picture" placeholder="e.g., /images/mycharacter.png" required><br>

                                <label for="color">Character Color (Hex code or color name):</label>
                                <input type="text" name="color" placeholder="e.g., #FF5733" required><br>


                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Add Character</button>
                            </div>
                        </form>

                    <!-- List of existing game characters with delete option -->
                    <h3>Existing Game Characters</h3>
                    <div class="admin-characters-box">
                        <% gameCharacters.forEach(character => { %>
                            <div class="admin-character-item">
                                <p><%= character.name %></p>
                                <p>Loves: <%= character.loves %>, Likes: <%= character.likes %></p> 
                                <p>Dislikes: <%= character.dislikes %>, Hates: <%= character.hates %></p>
                                <p>Activity Durability: <%= character.activity_durability %></p>
                                <div class="item-card-actions">
                                    <form action="/dashboard/admin/delete-character" method="POST">
                                        <input type="hidden" name="characterId" value="<%= character.id %>">
                                        <button type="submit" class="btn btn-danger">Delete Character</button>
                                    </form>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <!-- Admin: Manage users -->
                    <section class="admin-user-management">
                        <h3>Manage Users</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Role</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% users.forEach(user => { %>
                                <tr>
                                    <td><%= user.username %></td>
                                    <td><%= user.email %></td>
                                    <td><%= user.role %></td>
                                    <td>
                                        <div class="action-buttons">
                                            <!-- Edit user form -->
                                            <form action="/dashboard/admin/edit-user" method="POST" style="display: inline-block;">
                                                <input type="hidden" name="userId" value="<%= user.id %>">
                                                <input type="text" name="newName" placeholder="New Username" required>
                                                <input type="email" name="newEmail" placeholder="New Email" required>
                                                <button type="submit">Edit</button>
                                            </form>

                                            <!-- Delete user form -->
                                            <form action="/dashboard/admin/delete-user" method="POST" style="display:inline-block; margin-left: 10px">
                                                <input type="hidden" name="userId" value="<%= user.id %>">
                                                <button type="submit" onclick="return confirm('Are you sure you want to delete this user?');">Delete</button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                            </tbody>
                        </table>
                    <% } %>
                </section>
            </section>
            <!-- End Admin Section-->
        </div>

        <!-- ==============================================
            Front-End Scripts
        =============================================== -->


        <!-- ==============================================
            Edit Profile Viewing
        =============================================== -->
        <script>
            //Toggle between "view" and "edit" profile sections
            document.addEventListener('DOMContentLoaded', () => {
                const editBtn = document.getElementById('edit-profile-btn');
                const cancelBtn = document.getElementById('cancel-edit-btn');
                const profileView = document.getElementById('profile-view');
                const editForm = document.getElementById('edit-profile-form');
        
                //When "edit profile" is clicked, then hide the profile view and show the edit form
                editBtn.addEventListener('click', () => {
                    profileView.style.display = 'none';
                    editForm.style.display = 'block';
                });
                
                //When the "cancel" button is clicked, hide the edit form and show the profile view again
                cancelBtn.addEventListener('click', () => {
                    editForm.style.display = 'none';
                    profileView.style.display = 'block';
                });
            });
        </script>

        <!-- ==============================================
            Deleting Account 
        =============================================== -->
        <script>
            //Show or hide the confirmation modal for account deletion
            const deleteBtn = document.getElementById('deleteAccountBtn');
            const modal = document.getElementById('deleteModal');
            const cancelBtn = document.getElementById('cancelDeleteBtn');
        
            //When "Delete profile" is clicked, then show the confirmation modal
            deleteBtn.addEventListener('click', () => {
                modal.style.display = 'flex';
            });
            
            //When "cancel" in modal is clicked, then hide the mdoal
            cancelBtn.addEventListener('click', () =>{
                modal.style.display = 'none';
            });
        </script>

        <!-- ==============================================
            Color slider logic for choosing and saving a profile color
        =============================================== -->
        <script>
            document.addEventListener('DOMContentLoaded', function() {
            const colorSlider = document.getElementById('colorSlider');
            const profileCircle = document.getElementById('profileCircle');
            const profileUsername = document.getElementById('profileUsername');
            const saveColorButton = document.getElementById('saveColorButton');
            const resetColorButton = document.getElementById('resetColorButton');
            const accountHeader = document.querySelector('.heading');
            const saveMessage = document.getElementById('saveMessage');

            // Grabs saved color from server
            const savedColor = "<%= user.profile_color || '#808080' %>";

            // Converts HSL color value to hex code
            function hslToHex(h, s, l) {
                l /= 100;
                const a = s * Math.min(l, 1 - l) / 100;
                const f = n => {
                    const k = (n + h / 30) % 12;
                    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
                    return Math.round(255 * color).toString(16).padStart(2, '0');
                };
                return `#${f(0)}${f(8)}${f(4)}`;
            }

            // Update UI live preview when slider is moved
            function updateLivePreview(hue) {
                if (hue === undefined) return;
                let selectedColor = hslToHex(hue, 100, 50);

                profileCircle.style.backgroundColor = selectedColor;

                const r = parseInt(selectedColor.substr(1, 2), 16);
                const g = parseInt(selectedColor.substr(3, 2), 16);
                const b = parseInt(selectedColor.substr(5, 2), 16);
                const brightness = (r * 299 + g * 587 + b * 114) / 1000;

                if (brightness > 200) {
                    profileUsername.style.color = '#000000';
                } else {
                    profileUsername.style.color = '#ffffff';
                }

                if (accountHeader) {
                    accountHeader.style.backgroundColor = selectedColor;
                }
            }

            // On the page load, set the real saved color
            profileCircle.style.backgroundColor = savedColor;
            accountHeader.style.backgroundColor = savedColor;

            // Calculate brightness for username text color as color changes
            const r = parseInt(savedColor.substr(1, 2), 16);
            const g = parseInt(savedColor.substr(3, 2), 16);
            const b = parseInt(savedColor.substr(5, 2), 16);
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            if (brightness > 200) {
                profileUsername.style.color = '#000000';
            } else {
                profileUsername.style.color = '#ffffff';
            }

            //Update color preview live when slider changes
            colorSlider.addEventListener('input', function() {
                if (colorSlider.dataset.initialized === "false") {
                    colorSlider.dataset.initialized = "true";
                }
                updateLivePreview(colorSlider.value);
            });
            
            // Save the selected color to the server 
            saveColorButton.addEventListener('click', function() {
                let colorToSave;

                if (colorSlider.dataset.initialized === "false") {
                    // User never touched slider → default grey
                    colorToSave = '#808080';
                } else {
                    const hue = colorSlider.value;
                    colorToSave = hslToHex(hue, 100, 50);
                }
                fetch('/dashboard/saveColor', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ profile_color: colorToSave }),
                })
                .then(response => {
                    if (response.ok) {
                        saveMessage.style.display = 'block';
                        saveMessage.style.opacity = '1';
                        setTimeout(() => {
                            saveMessage.style.opacity = '0';
                            setTimeout(() => {
                                saveMessage.style.display = 'none';
                            }, 500);
                        }, 2000);
                    } else {
                        alert('Failed to save color.');
                    }
                })
                .catch(error => {
                    console.error('Error saving color:', error);
                });
            });

            //Resets the color back to the default (grey)
            resetColorButton.addEventListener('click', function() {
                colorSlider.value = 180; // or any center you want
                colorSlider.dataset.initialized = "false";
                const neutralGrey = '#808080';

                profileCircle.style.backgroundColor = neutralGrey;
                profileUsername.style.color = '#ffffff';
                accountHeader.style.backgroundColor = neutralGrey;
            });


        });
        </script>

        <!-- ==============================================
            Choices.js initalization for Multi-select dropdowns
        =============================================== -->
        <!--<script>
            document.addEventListener('DOMContentLoaded', function () {
                const elements = document.querySelectorAll('.choices-multiple');
                elements.forEach(element => {
                    new Choices(element, {
                        removeItemButton: true,  // Adds "X" button to remove selections
                    });
                });
            });
        </script>  -->

        <!-- ==============================================
            Prevents duplicates across loves, likes, hates, dislikes 
        =============================================== -->      

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const loves = document.getElementById('characterLoves');
                const likes = document.getElementById('characterLikes');
                const dislikes = document.getElementById('characterDislikes');
                const hates = document.getElementById('characterHates');
            
                const selects = [loves, likes, dislikes, hates];
            
                // Save all original options
                const allOptions = {};
                selects.forEach(select => {
                    allOptions[select.id] = Array.from(select.options).map(opt => ({
                        value: opt.value,
                        label: opt.text,
                    }));
                });
            
                // Initialize Choices.js
                const choicesInstances = selects.map(select => new Choices(select, {
                    removeItemButton: true,
                    shouldSort: false,
                }));
            
                function updateChoices() {
                    const selectedValues = new Set();
            
                    // Collect all selected values across selects
                    choicesInstances.forEach(instance => {
                        instance.getValue(true).forEach(val => {
                            selectedValues.add(val);
                        });
                    });
            
                    // Update each select
                    choicesInstances.forEach((instance, idx) => {
                        const select = selects[idx];
                        const currentSelections = instance.getValue(true);
            
                        // ✅ FULLY clear previous values and selections
                        instance.removeActiveItems(); // <<<<<<<< this fixes duplication
                        instance.clearChoices();
            
                        // Build the fresh set of choices
                        const newChoices = allOptions[select.id].map(opt => ({
                            value: opt.value,
                            label: opt.label,
                            selected: currentSelections.includes(opt.value),
                            disabled: selectedValues.has(opt.value) && !currentSelections.includes(opt.value)
                        }));
            
                        instance.setChoices(newChoices, 'value', 'label', false);
                    });
                }
            
                // Attach event listeners
                choicesInstances.forEach(instance => {
                    instance.passedElement.element.addEventListener('change', updateChoices);
                });
            
                updateChoices(); // run once at page load
            });
        </script>
            
            
                        

        <!-- ==============================================
            Pop up alers for when incorrect information is inserted for profile editing
        =============================================== -->
        <script>
            //display pop up message if redirected with success/error in URL
            const params = new URLSearchParams(window.location.search);
            window.addEventListener('DOMContentLoaded', () => {
                const popup = document.createElement('div');
                popup.style.position = 'fixed';
                popup.style.top = '20px';
                popup.style.left = '50%';
                popup.style.transform = 'translateX(-50%)';
                popup.style.padding = '12px 24px';
                popup.style.borderRadius = '8px';
                popup.style.fontWeight = 'bold';
                popup.style.zIndex = '9999';
                popup.style.boxShadow = '0 0 10px rgba(0,0,0,0.2)';
                popup.style.display = 'none'; // hide until needed
                document.body.appendChild(popup);
        
                if (params.get('error') === 'incorrectPassword') {
                    popup.innerText = '⚠️ Incorrect current password. Please try again.';
                    popup.style.backgroundColor = '#f8d7da'; // light red
                    popup.style.color = '#721c24'; // dark red
                    popup.style.display = 'block';
                }
        
                if (params.get('success') === 'profileUpdated') {
                    popup.innerText = '✅ Profile updated successfully!';
                    popup.style.backgroundColor = '#d4edda'; // light green
                    popup.style.color = '#155724'; // dark green
                    popup.style.display = 'block';
                }

                //Automatically remove the popup after 3 seconds
                if (popup.style.display === 'block') {
                    setTimeout(() => {
                        popup.remove();
                        window.history.replaceState(null, null, '/dashboard'); // clean URL
                    }, 3000); // 3 seconds
                }
            });
        </script>
                       
        <script type="module" src="/js/dashboard_client.js"></script>

        <!-- ==============================================
        TEMP TEST DROPDOWN
        
        <h2 style="margin-top: 50px;">Test Dropdown</h2>
        <select id="testChoices" multiple>
            <option value="pizza">Pizza</option>
            <option value="burgers">Burgers</option>
            <option value="icecream">Ice Cream</option>
        </select>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
            const test = new Choices('#testChoices', {
                removeItemButton: true
            });
            });
        </script>
        ================================================ -->


    </body>
</html>