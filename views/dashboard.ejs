<%- include('./partials/header') %> 
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

    <body class="home"> 
        <div class="dashboard-container">
            <h1>Dashboard</h1>
            <section class="profile-section">
                <h2>Your Profile</h2>
                <h2 style="color: black;">Your High Score: <%= happinessScore %></h2>

                <!-- Read only provile view -->
                <div id="profile-view">
                    <p><strong>Name: </strong><%= user.name %></p>
                    <p><strong>Email: </strong><%= user.email %></p>
                    <button id="edit-profile-btn" class="btn btn-secondary">Edit Profile</button>
                </div>

                <div class="profile-color-settings">
                    <label for="colorSlider">Choose Profile Color:</label><br>
                    <input type="range" id="colorSlider" min="0" max="360" value="180" data-initialized="false"><br><br>
                
                    <button id="saveColorButton" type="button">Save Color</button>
                    <button id="resetColorButton" type="button">Reset to Default</button>
                
                    <div id="saveMessage" style="display: none; color: green; margin-top: 10px; font-weight: bold;">
                        Color Saved!
                    </div>
                </div>
                            

                <!-- Profile editing form, hidden initially -->
                <form id="edit-profile-form" action="/dashboard/edit" method="POST" style="display: none;">
                    <div class="form-group">
                        <label for="username">Name:</label>
                        <input type="text" name="name" placeholder="<%= user.username %>" required><br>

                        <label for="email">Email:</label>
                        <input type="email" name="email" placeholder="<%= user.email %>" required><br>

                        <hr>
                        <h4>Change Password</h4>
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" name="currentPassword" placeholder="Enter current password"><br>

                        <label for="newPassword">New Password:</label>
                        <input type="password" name="newPassword" placeholder="Enter new password"><br>
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">Update Profile</button>
                            <button type="button" id="cancel-edit-btn" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                    <!-- <label for="profil-pic">Upload Profile Picture:</label>
                    <input type="file" id="profile-pic" name="profile-pic" accept="image/*"> -->


                </form>


                <div class="form-actions">
                    <!-- Trigger button -->
                     <button type="button" class="btn btn-danger" id="deleteAccountBtn" style="margin-right: 10px">
                        Delete Profile
                     </button>

                     <!-- Logout button-->
                    <form action="/dashboard/logout" method="POST">
                        <button type="submit" class="btn btn-secondary">Logout</button>
                    </form>
                </div>

                <!--Confirmation Modal-->
                <div id="deleteModal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0,0,0,0.5); justify-content: center; align-items: center; z-index: 999;">
                    <div style="background: white; padding: 20px; border-radius: 10px; text-align: center;">
                        <p>Are you sure you want to delete your account? This action cannot be undone.</p>
                        <form action="/dashboard/delete" method="POST"> <!--style="margin-right: 10px"-->
                            <button type="submit" class="btn btn-danger">Yes, I'm sure.</button>
                            <button type="button" class="btn btn-secondary" id="cancelDeleteBtn" style="margin-left: 10px;">Cancel</button>
                        </form>
                    </div>
                </div>
            </section>

            <% if (isAdmin) { %>
                <section class="admin-section">
                    <h2>Admin Section: Manage Tasks</h2>

                    <!-- Form to add a task -->
                    <form action="/dashboard/admin/add-task" method="POST">
                        <div class="form-group">
                            <label for="taskName">Task Name:</label>
                            <input type="text" name="username" required><br>

                            <label for="taskDescription">Task Description:</label>
                            <textarea name="description"></textarea><br>

                            <label for="taskCategory">Category:</label>
                            <select name="category_id" required>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category.id %>"><%= category.name %></option>
                                <% }); %>
                            </select><br>

                            <label for="taskPoints">Points:</label>
                            <input type="number" name="points" min="0"><br>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">Add Task</button>
                        </div>
                    </form>

                    <!-- List of tasks with delete option -->
                    <h3>Existing Tasks</h3>
                    <div class="admin-tasks-box">
                        <% tasks.forEach(task => { %>
                            <div class="admin-task-item">
                                <p><strong><%= task.name %></strong>: <%= task.description %></p>
                                <p>Category: <%= task.category_name %></p>
                                <div class="item-card-actions">
                                    <form action="/dashboard/admin/delete-task" method="POST">
                                        <input type="hidden" name="taskId" value="<%= task.id %>">
                                        <button type="submit" class="btn btn-danger">Delete Task</button>
                                    </form>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <h2>Admin Section: Manage Game Characters</h2>
                        <!-- Form to add a game character -->
                        <form action="/dashboard/admin/add-character" method="POST">
                            <div class="form-group">
                                <label for="characterLoves">Loves:</label>
                                <select name="loves[]" id="characterLoves" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="characterLikes">Likes:</label>
                                <select name="likes[]" id="characterLikes" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="characterDislikes">Dislikes:</label>
                                <select name="dislikes[]" id="characterDislikes" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="characterHates">Hates:</label>
                                <select name="hates[]" id="characterHates" multiple required class="choices-multiple">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }) %>
                                </select><br>

                                <label for="activityDurability">Activity Durability:</label>
                                <input type="number" name="activity_durability" min="0" step="1"><br>

                                <label for="happinessScore">Happiness Score:</label>
                                <input type="number" name="happiness_score" min="0" max="100" step="1"><br>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Add Character</button>
                            </div>
                        </form>

                    <!-- List of game characters with delete option -->
                    <h3>Existing Game Characters</h3>
                    <div class="admin-characters-box">
                        <% gameCharacters.forEach(character => { %>
                            <div class="admin-character-item">
                                <p><%= character.name %></p>
                                <p>Loves: <%= character.loves %>, Likes: <%= character.likes %></p> 
                                <p>Dislikes: <%= character.dislikes %>, Hates: <%= character.hates %></p>
                                <p>Activity Durability: <%= character.activity_durability %>, Happiness Score: <%= character.happiness_score %></p>
                                <div class="item-card-actions">
                                    <form action="/dashboard/admin/delete-character" method="POST">
                                        <input type="hidden" name="characterId" value="<%= character.id %>">
                                        <button type="submit" class="btn btn-danger">Delete Character</button>
                                    </form>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } %>
            </section>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const editBtn = document.getElementById('edit-profile-btn');
                const cancelBtn = document.getElementById('cancel-edit-btn');
                const profileView = document.getElementById('profile-view');
                const editForm = document.getElementById('edit-profile-form');
        
                editBtn.addEventListener('click', () => {
                    profileView.style.display = 'none';
                    editForm.style.display = 'block';
                });
        
                cancelBtn.addEventListener('click', () => {
                    editForm.style.display = 'none';
                    profileView.style.display = 'block';
                });
            });
        </script>
        <script>
            const deleteBtn = document.getElementById('deleteAccountBtn');
            const modal = document.getElementById('deleteModal');
            const cancelBtn = document.getElementById('cancelDeleteBtn');
        
            deleteBtn.addEventListener('click', () => {
                modal.style.display = 'flex';
            });
            cancelBtn.addEventListener('click', () =>{
                modal.style.display = 'none';
            });
        </script>

        <!-- FINAL color slider script -->
        <script>
            document.addEventListener('DOMContentLoaded', function() {
            const colorSlider = document.getElementById('colorSlider');
            const profileCircle = document.getElementById('profileCircle');
            const profileUsername = document.getElementById('profileUsername');
            const saveColorButton = document.getElementById('saveColorButton');
            const resetColorButton = document.getElementById('resetColorButton');
            const accountHeader = document.querySelector('.heading');
            const saveMessage = document.getElementById('saveMessage');

            // New: grab saved color from server
            const savedColor = "<%= user.profile_color || '#808080' %>";

            function hslToHex(h, s, l) {
                l /= 100;
                const a = s * Math.min(l, 1 - l) / 100;
                const f = n => {
                    const k = (n + h / 30) % 12;
                    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
                    return Math.round(255 * color).toString(16).padStart(2, '0');
                };
                return `#${f(0)}${f(8)}${f(4)}`;
            }

            function updateLivePreview(hue) {
                if (hue === undefined) return;
                let selectedColor = hslToHex(hue, 100, 50);

                profileCircle.style.backgroundColor = selectedColor;

                const r = parseInt(selectedColor.substr(1, 2), 16);
                const g = parseInt(selectedColor.substr(3, 2), 16);
                const b = parseInt(selectedColor.substr(5, 2), 16);
                const brightness = (r * 299 + g * 587 + b * 114) / 1000;

                if (brightness > 200) {
                    profileUsername.style.color = '#000000';
                } else {
                    profileUsername.style.color = '#ffffff';
                }

                if (accountHeader) {
                    accountHeader.style.backgroundColor = selectedColor;
                }
            }

            // 🛠 New: On page load, set the real saved color
            profileCircle.style.backgroundColor = savedColor;
            accountHeader.style.backgroundColor = savedColor;

            // Calculate brightness for username text color
            const r = parseInt(savedColor.substr(1, 2), 16);
            const g = parseInt(savedColor.substr(3, 2), 16);
            const b = parseInt(savedColor.substr(5, 2), 16);
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            if (brightness > 200) {
                profileUsername.style.color = '#000000';
            } else {
                profileUsername.style.color = '#ffffff';
            }

            colorSlider.addEventListener('input', function() {
                if (colorSlider.dataset.initialized === "false") {
                    colorSlider.dataset.initialized = "true";
                }
                updateLivePreview(colorSlider.value);
            });
            
                saveColorButton.addEventListener('click', function() {
                    let colorToSave;

                    if (colorSlider.dataset.initialized === "false") {
                        // User never touched slider → default grey
                        colorToSave = '#808080';
                    } else {
                        const hue = colorSlider.value;
                        colorToSave = hslToHex(hue, 100, 50);
                    }

                    fetch('/dashboard/saveColor', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ profile_color: colorToSave }),
                    })
                    .then(response => {
                        if (response.ok) {
                            saveMessage.style.display = 'block';
                            saveMessage.style.opacity = '1';
                            setTimeout(() => {
                                saveMessage.style.opacity = '0';
                                setTimeout(() => {
                                    saveMessage.style.display = 'none';
                                }, 500);
                            }, 2000);
                        } else {
                            alert('Failed to save color.');
                        }
                    })
                    .catch(error => {
                        console.error('Error saving color:', error);
                    });
                });

                resetColorButton.addEventListener('click', function() {
                    colorSlider.value = 180; // or any center you want
                    colorSlider.dataset.initialized = "false";

                    const neutralGrey = '#808080';

                    profileCircle.style.backgroundColor = neutralGrey;
                    profileUsername.style.color = '#ffffff';
                    accountHeader.style.backgroundColor = neutralGrey;
                });


            });
            </script>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const elements = document.querySelectorAll('.choices-multiple');
                    elements.forEach(element => {
                        new Choices(element, {
                            removeItemButton: true,  // Adds "X" button to remove selections
                        });
                    });
                });
                </script>                
    </body>
</html>